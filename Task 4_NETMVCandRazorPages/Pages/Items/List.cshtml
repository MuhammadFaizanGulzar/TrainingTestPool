@page
@model Task_4_NETMVCandRazorPages.Pages.Items.ListModel
@{
}

<h1 class="mb-3">List of Items</h1>

<p>
    <a asp-page="AddItem">Create New Item</a>
</p>

    <form asp-page="./List" method="get">
        <div class="form-actions no-color">
            <p>
                Find by name:
                <input type="text" name="SearchString" value="@Model.CurrentFilter" />
                <input type="submit" value="Search" class="btn btn-primary" /> |
                <a asp-page="./List">Back to full List</a>
            </p>
        </div>
    </form>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>
                    <a asp-page="./List" asp-route-sortOrder="@Model.NameSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Items[0].Name)
                    </a>
                </th>
                <th>
                    <a asp-page="./List" asp-route-sortOrder="@Model.DescriptionSort" asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Items[0].Description)
                    </a>
                </th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items) @* Use .Items to access the paginated list *@
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>
                        <a href="/Items/Edit/@item.Id" class="btn btn-dark">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>


@{
    var prevDisabled = !Model.Items.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Items.HasNextPage ? "disabled" : "";
}

<a asp-page="./List"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Items.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>

@foreach (var pageNumber in Model.Items.PageNumbers)
{
    <a asp-page="./List"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@pageNumber"
   asp-route-currentFilter="@Model.CurrentFilter"
       class="btn btn-secondary @(pageNumber == Model.Items.PageIndex ? "active" : "")">
        @pageNumber
    </a>
}

<a asp-page="./List"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Items.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>

